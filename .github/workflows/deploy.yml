name: Deploy to EC2 and Sync Logs

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            echo "=== Pulling latest code ==="
            cd ~/PublicHealthDomain
            git fetch --prune origin
            git reset --hard origin/main
            git clean -fd

            echo "=== Stop and remove existing container by name ==="
            if docker ps -q -f name=health-app | grep -q .; then
              docker stop health-app || true
            fi
            if docker ps -aq -f name=health-app | grep -q .; then
              docker rm -f health-app || true
            fi

            echo "=== Double-check: remove any container using same name by ID ==="
            CONTAINER_ID=$(docker ps -aq --filter "name=^/health-app$")
            if [ ! -z "$CONTAINER_ID" ]; then
              echo "Found lingering container ID: $CONTAINER_ID. Forcibly removing..."
              docker rm -f "$CONTAINER_ID" || true
            fi

            echo "=== Docker cleanup ==="
            docker image prune -af || true
            docker volume prune -f || true

            echo "=== Building Docker image ==="
            docker build --no-cache -t public-health-app:latest .

            echo "=== Running new container on port 80 ==="
            docker run -d --name health-app -p 80:8000 \
              -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
              -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
              -e AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} \
              public-health-app:latest

            echo "=== Ensure logs directory exists ==="
            docker exec health-app mkdir -p /app/logs

            echo "=== Sync logs to S3 ==="
            docker exec -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
                        -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
                        -e AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} \
                        health-app aws s3 cp /app/logs/ s3://jenkins-artifacts-logs/logs/ --recursive

            echo "=== Deployment complete! ==="
          EOF

      - name: Confirm deployment
        run: echo "Deployment complete. Your EC2 instance has the latest changes."
